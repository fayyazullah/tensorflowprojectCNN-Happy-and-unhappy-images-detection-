from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.optimizers import RMSprop
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
import cv2
import os

img=image.load_img("C://Users//Administrator//Desktop//Computer-vision//basedata//train//happy//2.jpg")

plt.imshow(img)

cv2.imread("C://Users//Administrator//Desktop//Computer-vision//basedata//train//happy//3.jpg")

cv2.imread("C://Users//Administrator//Desktop//Computer-vision//basedata//train//happy//2.jpg").shape

train=ImageDataGenerator(rescale=1/255)
validation=ImageDataGenerator(rescale=1/255)


train_dataset.classes

train_dataset=train.flow_from_directory("C://Users//Administrator//Desktop//Computer-vision//basedata//train//",
                                         target_size=(200,200),
                                         batch_size=3,
                                         class_mode='binary')

validation_dataset=validation.flow_from_directory("C://Users//Administrator//Desktop//Computer-vision//basedata//validation//",
                                         target_size=(200,200),
                                         batch_size=3,
                                         class_mode='binary')


model=tf.keras.models.Sequential([tf.keras.layers.Conv2D(16,(3,3),activation='relu',input_shape=(200,200,3)),
                                 tf.keras.layers.MaxPool2D(2,2),
                                  
                                  #
                                  tf.keras.layers.Conv2D(32,(3,3),activation='relu'),
                                 tf.keras.layers.MaxPool2D(2,2),
                                  #
                                  tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
                                 tf.keras.layers.MaxPool2D(2,2),
                                  
                                  ##
                                  tf.keras.layers.Flatten(),
                                  ##
                                  tf.keras.layers.Dense(512,activation='relu'),
                                  ##
                                  tf.keras.layers.Dense(1,activation='sigmoid'),
                              
                            ]
                                )
